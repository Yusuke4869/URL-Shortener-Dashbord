/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description すべてのアイテムを取得します */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description すべてのアイテムを取得しました */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Items"];
          };
        };
        /** @description API Key がセットされていないか不正です */
        401: {
          headers: Record<string, unknown>;
          content?: never;
        };
        /** @description 指定されたホストが存在しません */
        404: {
          headers: Record<string, unknown>;
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/items/{param}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 指定したアイテムを取得します */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description アイテムの識別子（短縮URLの識別子） */
          param: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description アイテムを取得しました */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Item"];
          };
        };
        /** @description API Key がセットされていないか不正です */
        401: {
          headers: Record<string, unknown>;
          content?: never;
        };
        /** @description 指定されたホストまたはアイテムが存在しません */
        404: {
          headers: Record<string, unknown>;
          content?: never;
        };
      };
    };
    /** @description 指定したアイテムを作成または更新します */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description アイテムの識別子（短縮URLの識別子） */
          param: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json": {
            /**
             * @description アイテムの説明
             * @example This is an example item.
             */
            description?: string;
            /**
             * Format: uri
             * @description リダイレクト先のURL (HTTP)
             * @example https://example.com
             */
            url: string;
            /**
             * @description アクセス回数（指定した値で上書き）
             * @example 0
             */
            count?: number;
          };
        };
      };
      responses: {
        /** @description アイテムを作成または更新しました */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Item"];
          };
        };
        /** @description API Key がセットされていないか不正です */
        401: {
          headers: Record<string, unknown>;
          content?: never;
        };
        /** @description 指定されたホストが存在しません */
        404: {
          headers: Record<string, unknown>;
          content?: never;
        };
      };
    };
    post?: never;
    /** @description 短縮URLを無効化するか、アイテムをデータベースから削除します */
    delete: {
      parameters: {
        query?: {
          /** @description アイテムを完全に削除するかどうか（削除する場合は true） */
          permanently?: "true" | "false";
        };
        header?: never;
        path: {
          /** @description アイテムの識別子（短縮URLの識別子） */
          param: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 短縮URLを無効化しました */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Item"] & {
              /**
               * @description 短縮URLが無効化されているかどうか
               * @example true
               */
              unavailable?: boolean;
            };
          };
        };
        /** @description アイテムをデータベースから削除しました */
        204: {
          headers: Record<string, unknown>;
          content?: never;
        };
        /** @description API Key がセットされていないか不正です */
        401: {
          headers: Record<string, unknown>;
          content?: never;
        };
        /** @description 指定されたホストまたはアイテムが存在しません */
        404: {
          headers: Record<string, unknown>;
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    /** @description 指定したアイテムの一部を更新します */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description アイテムの識別子（短縮URLの識別子） */
          param: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json": {
            /**
             * @description アイテムの説明
             * @example This is an example item.
             */
            description?: string;
            /**
             * Format: uri
             * @description リダイレクト先のURL (HTTP)
             * @example https://example.com
             */
            url?: string;
            /**
             * @description アクセス回数（指定した値で上書き）
             * @example 0
             */
            count?: number;
            /**
             * @description 短縮URLが無効化されているかどうか
             * @example false
             */
            unavailable?: boolean;
          };
        };
      };
      responses: {
        /** @description アイテムを更新しました */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Item"];
          };
        };
        /** @description API Key がセットされていないか不正です */
        401: {
          headers: Record<string, unknown>;
          content?: never;
        };
        /** @description 指定されたホストまたはアイテムが存在しません */
        404: {
          headers: Record<string, unknown>;
          content?: never;
        };
      };
    };
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Item: {
      /**
       * @description アイテムの識別子（短縮URLの識別子）
       * @example example
       */
      param: string;
      /**
       * @description アイテムの説明
       * @example This is an example item.
       */
      description?: string;
      /**
       * Format: uri
       * @description リダイレクト先のURL (HTTP)
       * @example https://example.com
       */
      url: string;
      /**
       * @description 短縮URLへのアクセス回数
       * @example 42
       */
      count: number;
      /**
       * @description 短縮URLが無効化されているかどうか
       * @example false
       */
      unavailable: boolean;
    };
    /** @description アイテムの配列 */
    Items: components["schemas"]["Item"][];
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
